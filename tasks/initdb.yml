---
- name: Ensure pg_dir is empty and no exist
  find:
    path: "{{ postgres_db_data + '/' + item + '/' }}"
  loop: "{{ postgres_db_dir }}"
  register: pg_dir_files

- name: create list dir and port combine
  set_fact:
    postgres_db_dir_port: "{{ postgres_db_dir_port | default({}) | combine({item.0: { 'port': item.1, 'matched': item.2.matched}}) }}"
  loop: "{{ query('together', postgres_db_dir, postgres_db_ports, pg_dir_files.results )}}"

- name: Ensure postgres_db_data is exist
  stat:
    path: "{{ postgres_db_data }}"
  register: pg_data_dir

- name: create dir {{ postgres_db_data }}
  file:
    path: "{{ postgres_db_data }}" 
    owner: root
    group: root
    mode: 0755
    state: directory
  when: not pg_data_dir.stat.exists

- name: create database dir {{ postgres_db_dir }}
  file:
    path: "{{ (postgres_db_data|replace (' ', '')) + '/' + item.key }}"
    owner: postgres
    group: postgres
    mode:  0750
    state: directory
  loop: "{{ postgres_db_dir_port | dict2items }}"    
  when: item.value.matched == 0 

- name: cmd initdb if postgres for 1c
  become_user: postgres
  shell: >
    {{ postgres_db_init_command_1c }}
    --pgdata={{ postgres_db_data + '/' + item.key }}
    --locale={{ postgres_db_locale }}
    {{ '--data-checksums' if postgres_db_checksum }}
    {{ postgres_db_extra_opt }}
  loop: "{{ postgres_db_dir_port | dict2items }}" 
  when: item.value.matched == 0 and postgres_pg_1c == true and inventory_replica_signal == false

- name: cmd initdb if postgresql classic
  become_user: postgres
  shell: >
    {{ postgres_db_init_command }}
    --pgdata={{ postgres_db_data + '/' + item.key }}
    --locale={{ postgres_db_locale }}
    {{ '-k' if postgres_db_checksum }}
    {{ postgres_db_extra_opt }}
  loop: "{{ postgres_db_dir_port | dict2items }}" 
  when: item.value.matched == 0 and postgres_pg_1c == false and inventory_replica_signal == false

- name: add replication to pg_hba.conf master
  lineinfile:
    path: "{{ postgres_db_data }}/{{ item.key }}/pg_hba.conf"
    line: "host replication {{ postgres_db_rep_role }} {{ inventory_replica_ip }}/32 md5"
  notify: restart postgres
  loop: "{{ postgres_db_dir_port | dict2items }}" 
  when: postgres_db_rep_slot == true and inventory_replica_signal == false

- name: add to postgresql.conf port â„–
  ansible.builtin.blockinfile:
    marker: "# {mark} port"
    path: "/data/pgbase/{{ item.key }}/postgresql.conf"
    block: |
      port = {{ item.value.port }}
      unix_socket_directories = '/tmp'
  loop: "{{ postgres_db_dir_port | dict2items }}"
  when: inventory_replica_signal == false

- name: add to postgresql.conf block
  ansible.builtin.blockinfile:
    marker: "# {mark} replica"
    path: "/data/pgbase/{{ item.key }}/postgresql.conf"
    block: |
      wal_level = replica
      log_replication_commands = on
      log_min_messages = info
      log_min_error_statement = info
      archive_mode = on
      archive_command = 'cd .'
      max_wal_senders = 10
      hot_standby = on
      primary_conninfo = 'user={{postgres_db_rep_role}} passfile=''/var/lib/postgresql/.pgpass'' hostaddr={{ inventory_replica_ip }} channel_binding=disable port={{ item.value.port }} sslmode=disable sslcompression=0 ssl_min_protocol_version=TLSv1.2 gssencmode=disable krbsrvname=postgres target_session_attrs=any'
      wal_keep_size = {{ postgres_db_rep_size }}
      primary_slot_name = {{ inventory_replica_host | quote }}
  loop: "{{ postgres_db_dir_port | dict2items }}"
  when: postgres_db_rep_slot == true and inventory_replica_signal == false

